plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

ext {
	springAiVersion = "1.0.0-SNAPSHOT"
}

group = 'com.bocanjis'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationImplementation.extendsFrom(testImplementation)
	integrationRuntimeOnly.extendsFrom(testRuntimeOnly)
}

sourceSets {
	integration {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
		java {
			srcDirs("src/integration")
		}
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/release" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/snapshot" }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testImplementation 'org.testcontainers:mongodb'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation platform( "org.springframework.ai:spring-ai-bom:$springAiVersion")
}

tasks.named('test') {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	description = "Run integration tests"
	group = "verification"
	testClassesDirs = sourceSets.integration.output.classesDirs
	classpath = sourceSets.integration.runtimeClasspath
}

